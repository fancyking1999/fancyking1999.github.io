<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/4.9.8" created="2018-09-06 03:42" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>FancyKing&#039;s VirSite</title>
	<link>https://fancyking.tk</link>
	<description>FancyKing&#039;s VirSite On Net</description>
	<pubDate>Thu, 06 Sep 2018 03:42:31 +0000</pubDate>
	<language>zh-CN</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>https://fancyking.tk</wp:base_site_url>
	<wp:base_blog_url>https://fancyking.tk</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login><![CDATA[FancyKing]]></wp:author_login><wp:author_email><![CDATA[1533577900@qq.com]]></wp:author_email><wp:author_display_name><![CDATA[FancyKing]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>

	<wp:category>
		<wp:term_id>9</wp:term_id>
		<wp:category_nicename><![CDATA[bfs]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[BFS]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>8</wp:term_id>
		<wp:category_nicename><![CDATA[dfs]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[DFS]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>13</wp:term_id>
		<wp:category_nicename><![CDATA[git]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Git]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>3</wp:term_id>
		<wp:category_nicename><![CDATA[poj]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[POJ]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>16</wp:term_id>
		<wp:category_nicename><![CDATA[pta]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[PTA]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>18</wp:term_id>
		<wp:category_nicename><![CDATA[sublime]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Sublime]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>22</wp:term_id>
		<wp:category_nicename><![CDATA[%e5%b9%b6%e6%9f%a5%e9%9b%86]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[并查集]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>27</wp:term_id>
		<wp:category_nicename><![CDATA[%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[数据结构]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>1</wp:term_id>
		<wp:category_nicename><![CDATA[uncategorized]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[未分类]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>6</wp:term_id>
		<wp:category_nicename><![CDATA[%e7%ac%94%e8%ae%b0]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[笔记]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>24</wp:term_id>
		<wp:category_nicename><![CDATA[%e7%bd%91%e7%ab%99]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[网站]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>21</wp:term_id>
		<wp:category_nicename><![CDATA[%e8%bd%af%e4%bb%b6]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[软件]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>2</wp:term_id>
		<wp:category_nicename><![CDATA[%e9%a2%98%e8%a7%a3]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[题解]]></wp:cat_name>
	</wp:category>
	<wp:tag>
		<wp:term_id>11</wp:term_id>
		<wp:tag_slug><![CDATA[bfs]]></wp:tag_slug>
		<wp:tag_name><![CDATA[BFS]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>7</wp:term_id>
		<wp:tag_slug><![CDATA[c%e7%ac%94%e8%ae%b0]]></wp:tag_slug>
		<wp:tag_name><![CDATA[C++笔记]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>10</wp:term_id>
		<wp:tag_slug><![CDATA[dfs]]></wp:tag_slug>
		<wp:tag_name><![CDATA[DFS]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>14</wp:term_id>
		<wp:tag_slug><![CDATA[git]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Git]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>5</wp:term_id>
		<wp:tag_slug><![CDATA[poj]]></wp:tag_slug>
		<wp:tag_name><![CDATA[POJ]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>17</wp:term_id>
		<wp:tag_slug><![CDATA[pta]]></wp:tag_slug>
		<wp:tag_name><![CDATA[PTA]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>26</wp:term_id>
		<wp:tag_slug><![CDATA[ssl]]></wp:tag_slug>
		<wp:tag_name><![CDATA[SSL]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>20</wp:term_id>
		<wp:tag_slug><![CDATA[sublime]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Sublime]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>23</wp:term_id>
		<wp:tag_slug><![CDATA[%e5%b9%b6%e6%9f%a5%e9%9b%86]]></wp:tag_slug>
		<wp:tag_name><![CDATA[并查集]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>12</wp:term_id>
		<wp:tag_slug><![CDATA[%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84]]></wp:tag_slug>
		<wp:tag_name><![CDATA[数据结构]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>28</wp:term_id>
		<wp:tag_slug><![CDATA[%e6%a0%91%e7%8a%b6%e6%95%b0%e7%bb%84]]></wp:tag_slug>
		<wp:tag_name><![CDATA[树状数组]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>15</wp:term_id>
		<wp:tag_slug><![CDATA[%e7%ac%94%e8%ae%b0]]></wp:tag_slug>
		<wp:tag_name><![CDATA[笔记]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>25</wp:term_id>
		<wp:tag_slug><![CDATA[%e7%bd%91%e7%ab%99]]></wp:tag_slug>
		<wp:tag_name><![CDATA[网站]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>19</wp:term_id>
		<wp:tag_slug><![CDATA[%e8%bd%af%e4%bb%b6]]></wp:tag_slug>
		<wp:tag_name><![CDATA[软件]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>4</wp:term_id>
		<wp:tag_slug><![CDATA[%e9%a2%98%e8%a7%a3]]></wp:tag_slug>
		<wp:tag_name><![CDATA[题解]]></wp:tag_name>
	</wp:tag>
	<wp:term>
		<wp:term_id><![CDATA[9]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[bfs]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[BFS]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[11]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[bfs]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[BFS]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[7]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[c%e7%ac%94%e8%ae%b0]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[C++笔记]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[8]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[dfs]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[DFS]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[10]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[dfs]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[DFS]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[13]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[git]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Git]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[14]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[git]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Git]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[3]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[poj]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[POJ]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[5]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[poj]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[POJ]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[16]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[pta]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[PTA]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[17]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[pta]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[PTA]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[26]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[ssl]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[SSL]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[18]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[sublime]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Sublime]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[20]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[sublime]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Sublime]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[22]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%b9%b6%e6%9f%a5%e9%9b%86]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[并查集]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[23]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%b9%b6%e6%9f%a5%e9%9b%86]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[并查集]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[12]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[数据结构]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[27]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[数据结构]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[1]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[uncategorized]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[未分类]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[28]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e6%a0%91%e7%8a%b6%e6%95%b0%e7%bb%84]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[树状数组]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[6]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e7%ac%94%e8%ae%b0]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[笔记]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[15]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e7%ac%94%e8%ae%b0]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[笔记]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[24]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e7%bd%91%e7%ab%99]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[网站]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[25]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e7%bd%91%e7%ab%99]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[网站]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[19]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e8%bd%af%e4%bb%b6]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[软件]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[21]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e8%bd%af%e4%bb%b6]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[软件]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[2]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e9%a2%98%e8%a7%a3]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[题解]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[4]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e9%a2%98%e8%a7%a3]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[题解]]></wp:term_name>
	</wp:term>

	<generator>https://wordpress.org/?v=4.9.8</generator>

<image>
	<url>https://fancyking.tk/wp-content/uploads/2018/09/cropped-006APoFYjw1f9tt5xjx8tj30b40b43yr-32x32.jpg</url>
	<title>FancyKing&#039;s VirSite</title>
	<link>https://fancyking.tk</link>
	<width>32</width>
	<height>32</height>
</image> 

	<item>
		<title>世界，您好！</title>
		<link>https://fancyking.tk/archives/1</link>
		<pubDate>Thu, 06 Sep 2018 02:57:35 +0000</pubDate>
		<dc:creator><![CDATA[FancyKing]]></dc:creator>
		<guid isPermaLink="false">https://fancyking.tk/?p=1</guid>
		<description></description>
		<content:encoded><![CDATA[欢迎使用WordPress。这是您的第一篇文章。编辑或删除它，然后开始写作吧！]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1</wp:post_id>
		<wp:post_date><![CDATA[2018-09-06 10:57:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-09-06 02:57:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[hello-world__trashed]]></wp:post_name>
		<wp:status><![CDATA[trash]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[未分类]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_status]]></wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_time]]></wp:meta_key>
			<wp:meta_value><![CDATA[1536204201]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_desired_post_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[hello-world]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_comments_status]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:1;s:5:"trash";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1</wp:comment_id>
			<wp:comment_author><![CDATA[一位WordPress评论者]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[wapuu@wordpress.example]]></wp:comment_author_email>
			<wp:comment_author_url>https://wordpress.org/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2018-09-06 10:57:35]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2018-09-06 02:57:35]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[嗨，这是一条评论。
要开始审核、编辑及删除评论，请访问仪表盘的“评论”页面。
评论者头像来自<a href="https://gravatar.com">Gravatar</a>。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[post-trashed]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[_wp_trash_meta_status]]></wp:meta_key>
				<wp:meta_value><![CDATA[1]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[_wp_trash_meta_time]]></wp:meta_key>
				<wp:meta_value><![CDATA[1536203422]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>示例页面</title>
		<link>https://fancyking.tk/sample-page__trashed</link>
		<pubDate>Thu, 06 Sep 2018 02:57:35 +0000</pubDate>
		<dc:creator><![CDATA[FancyKing]]></dc:creator>
		<guid isPermaLink="false">https://fancyking.tk/?page_id=2</guid>
		<description></description>
		<content:encoded><![CDATA[这是示范页面。页面和博客文章不同，它的位置是固定的，通常会在站点导航栏显示。很多用户都创建一个“关于”页面，向访客介绍自己。例如：

<blockquote>欢迎！我白天是个邮递员，晚上就是个有抱负的演员。这是我的博客。我住在天朝的帝都，有条叫做Jack的狗。</blockquote>

……或这个：

<blockquote>XYZ Doohickey公司成立于1971年，自从建立以来，我们一直向社会贡献着优秀doohickies。我们的公司总部位于天朝魔都，有着超过两千名员工，对魔都政府税收有着巨大贡献。</blockquote>

而您，作为一个WordPress用户，我们建议您访问<a href="https://fancyking.tk/wp-admin/">控制板</a>，删除本页面，然后添加您自己的页面。祝您使用愉快！]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2</wp:post_id>
		<wp:post_date><![CDATA[2018-09-06 10:57:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-09-06 02:57:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[sample-page__trashed]]></wp:post_name>
		<wp:status><![CDATA[trash]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_status]]></wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_time]]></wp:meta_key>
			<wp:meta_value><![CDATA[1536203134]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_desired_post_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[sample-page]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>关于作者</title>
		<link>https://fancyking.tk/about</link>
		<pubDate>Thu, 06 Sep 2018 03:12:43 +0000</pubDate>
		<dc:creator><![CDATA[FancyKing]]></dc:creator>
		<guid isPermaLink="false">https://fancyking.tk/?page_id=7</guid>
		<description></description>
		<content:encoded><![CDATA[本站会记录一些我的学习笔记相关的东西，由于技术欠佳，可能有时候维护时间较长，希望谅解。

如何联系我：
    Mail： 1533577900@qq.com
    Github: https://github.com/FancyKings]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>7</wp:post_id>
		<wp:post_date><![CDATA[2018-09-06 11:12:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-09-06 03:12:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[about]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>006APoFYjw1f9tt5xjx8tj30b40b43yr</title>
		<link>https://fancyking.tk/006apofyjw1f9tt5xjx8tj30b40b43yr</link>
		<pubDate>Thu, 06 Sep 2018 03:13:40 +0000</pubDate>
		<dc:creator><![CDATA[FancyKing]]></dc:creator>
		<guid isPermaLink="false">https://fancyking.tk/wp-content/uploads/2018/09/006APoFYjw1f9tt5xjx8tj30b40b43yr.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>9</wp:post_id>
		<wp:post_date><![CDATA[2018-09-06 11:13:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-09-06 03:13:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[006apofyjw1f9tt5xjx8tj30b40b43yr]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://fancyking.tk/wp-content/uploads/2018/09/006APoFYjw1f9tt5xjx8tj30b40b43yr.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2018/09/006APoFYjw1f9tt5xjx8tj30b40b43yr.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:400;s:6:"height";i:400;s:4:"file";s:44:"2018/09/006APoFYjw1f9tt5xjx8tj30b40b43yr.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:44:"006APoFYjw1f9tt5xjx8tj30b40b43yr-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:44:"006APoFYjw1f9tt5xjx8tj30b40b43yr-300x300.jpg";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"1";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>cropped-006APoFYjw1f9tt5xjx8tj30b40b43yr.jpg</title>
		<link>https://fancyking.tk/cropped-006apofyjw1f9tt5xjx8tj30b40b43yr-jpg</link>
		<pubDate>Thu, 06 Sep 2018 03:13:51 +0000</pubDate>
		<dc:creator><![CDATA[FancyKing]]></dc:creator>
		<guid isPermaLink="false">https://fancyking.tk/wp-content/uploads/2018/09/cropped-006APoFYjw1f9tt5xjx8tj30b40b43yr.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[https://fancyking.tk/wp-content/uploads/2018/09/cropped-006APoFYjw1f9tt5xjx8tj30b40b43yr.jpg]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>10</wp:post_id>
		<wp:post_date><![CDATA[2018-09-06 11:13:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-09-06 03:13:51]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cropped-006apofyjw1f9tt5xjx8tj30b40b43yr-jpg]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://fancyking.tk/wp-content/uploads/2018/09/cropped-006APoFYjw1f9tt5xjx8tj30b40b43yr.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2018/09/cropped-006APoFYjw1f9tt5xjx8tj30b40b43yr.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_context]]></wp:meta_key>
			<wp:meta_value><![CDATA[site-icon]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:512;s:6:"height";i:512;s:4:"file";s:52:"2018/09/cropped-006APoFYjw1f9tt5xjx8tj30b40b43yr.jpg";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:52:"cropped-006APoFYjw1f9tt5xjx8tj30b40b43yr-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:52:"cropped-006APoFYjw1f9tt5xjx8tj30b40b43yr-300x300.jpg";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:13:"site_icon-270";a:4:{s:4:"file";s:52:"cropped-006APoFYjw1f9tt5xjx8tj30b40b43yr-270x270.jpg";s:5:"width";i:270;s:6:"height";i:270;s:9:"mime-type";s:10:"image/jpeg";}s:13:"site_icon-192";a:4:{s:4:"file";s:52:"cropped-006APoFYjw1f9tt5xjx8tj30b40b43yr-192x192.jpg";s:5:"width";i:192;s:6:"height";i:192;s:9:"mime-type";s:10:"image/jpeg";}s:13:"site_icon-180";a:4:{s:4:"file";s:52:"cropped-006APoFYjw1f9tt5xjx8tj30b40b43yr-180x180.jpg";s:5:"width";i:180;s:6:"height";i:180;s:9:"mime-type";s:10:"image/jpeg";}s:12:"site_icon-32";a:4:{s:4:"file";s:50:"cropped-006APoFYjw1f9tt5xjx8tj30b40b43yr-32x32.jpg";s:5:"width";i:32;s:6:"height";i:32;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ACM 模板</title>
		<link>https://fancyking.tk/acmmode</link>
		<pubDate>Thu, 06 Sep 2018 03:22:13 +0000</pubDate>
		<dc:creator><![CDATA[FancyKing]]></dc:creator>
		<guid isPermaLink="false">https://fancyking.tk/?page_id=12</guid>
		<description></description>
		<content:encoded><![CDATA[这里保存了我经常使用的觉得比较好的ACM 模板

<ul>
<li><a href="https://fancyking.tk/wp-content/uploads/2018/09/kuangbin%E7%9A%84ACM%E6%A8%A1%E6%9D%BF%EF%BC%88%E6%96%B0%EF%BC%89.pdf">kuangbin的ACM模板（新）</a> 源自：<a href="https://kuangbin.github.io" title="kuangbin.github.io">https://kuangbin.github.io</a></li>
<li><p><a href="https://fancyking.tk/wp-content/uploads/2018/09/ACM%E6%A8%A1%E6%9D%BF-f_zyj-v-2.1.pdf">ACM模板-f_zyj v 2.1</a> 源自： https://github.com/f-zyj/ACM</p></li>
<li><p><a href="https://fancyking.tk/wp-content/uploads/2018/09/acm-book.pdf">ACM_Book</a> 源自： <a href="https://legacy.gitbook.com/book/hrbust-acm-team/acm-book/details" title="Hrbust ACM Book">Hrbust ACM Book</a></p></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>12</wp:post_id>
		<wp:post_date><![CDATA[2018-09-06 11:22:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-09-06 03:22:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[acmmode]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>kuangbin的ACM模板（新）</title>
		<link>https://fancyking.tk/acmmode/kuangbin%e7%9a%84acm%e6%a8%a1%e6%9d%bf%ef%bc%88%e6%96%b0%ef%bc%89</link>
		<pubDate>Thu, 06 Sep 2018 03:18:31 +0000</pubDate>
		<dc:creator><![CDATA[FancyKing]]></dc:creator>
		<guid isPermaLink="false">https://fancyking.tk/wp-content/uploads/2018/09/kuangbin的ACM模板（新）.pdf</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>13</wp:post_id>
		<wp:post_date><![CDATA[2018-09-06 11:18:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-09-06 03:18:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[kuangbin%e7%9a%84acm%e6%a8%a1%e6%9d%bf%ef%bc%88%e6%96%b0%ef%bc%89]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>12</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://fancyking.tk/wp-content/uploads/2018/09/kuangbin的ACM模板（新）.pdf]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2018/09/kuangbin的ACM模板（新）.pdf]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ACM模板-f_zyj v 2.1</title>
		<link>https://fancyking.tk/acmmode/acm%e6%a8%a1%e6%9d%bf-f_zyj-v-2-1</link>
		<pubDate>Thu, 06 Sep 2018 03:18:34 +0000</pubDate>
		<dc:creator><![CDATA[FancyKing]]></dc:creator>
		<guid isPermaLink="false">https://fancyking.tk/wp-content/uploads/2018/09/ACM模板-f_zyj-v-2.1.pdf</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>14</wp:post_id>
		<wp:post_date><![CDATA[2018-09-06 11:18:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-09-06 03:18:34]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[acm%e6%a8%a1%e6%9d%bf-f_zyj-v-2-1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>12</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://fancyking.tk/wp-content/uploads/2018/09/ACM模板-f_zyj-v-2.1.pdf]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2018/09/ACM模板-f_zyj-v-2.1.pdf]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>acm-book</title>
		<link>https://fancyking.tk/acmmode/acm-book</link>
		<pubDate>Thu, 06 Sep 2018 03:21:05 +0000</pubDate>
		<dc:creator><![CDATA[FancyKing]]></dc:creator>
		<guid isPermaLink="false">https://fancyking.tk/wp-content/uploads/2018/09/acm-book.pdf</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>15</wp:post_id>
		<wp:post_date><![CDATA[2018-09-06 11:21:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-09-06 03:21:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[acm-book]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>12</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://fancyking.tk/wp-content/uploads/2018/09/acm-book.pdf]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2018/09/acm-book.pdf]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【题解】POJ-3279-Fliptile</title>
		<link>https://fancyking.tk/archives/18</link>
		<pubDate>Thu, 06 Sep 2018 03:27:15 +0000</pubDate>
		<dc:creator><![CDATA[FancyKing]]></dc:creator>
		<guid isPermaLink="false">https://fancyking.tk/?p=18</guid>
		<description></description>
		<content:encoded><![CDATA[<hr />

<h1>题意</h1>

题目中的意思是，给出一个由 0 和 1 组成的矩阵块，每次按压之后，按压的那一块，其上下左右四面的块的状态都会改变状态，问哪一种按压方法，可以在按压的次数最少的情况下使得矩阵全部为 0，最后输出矩阵。

<h1>思路</h1>

这个在操作的时候，每一个块一定要尽可能的少操作，因为操作偶数次会恢复初始状态，并且由题意知道，操作的顺序对解结果没有影响，所以我们可以先给定第一行的状态，再由第一行去逐一判断下一行，直到最后看一看是不是合法就好了。

<hr />

这里的第一行的操作的枚举，可以使用二进制来进行，快速方便，简记做如下代码：

<pre><code class="language-cpp  line-numbers">for(int i = 0;i &lt; (1&lt;&lt;n); ++i){
    memset(jge,0,sizeof(jge));
    for(int j = 0;j &lt; n; ++j){
        jge[0][n-j-1] = i&gt;&gt;j&amp;1;
    }
}
</code></pre>

有这几行代码给出的数组的第一行，就是不同的操作状态，也就是每一种我们都去模拟一下，最后看看哪一个最小。

<hr />

<ul>
<li>find 函数用于查询和合法性检验，给出经过当前所有已有的操作后，此块是否变为 0 的检验。</li>
<li>js 函数用于计算，给出某一个 块 是否按压的记录，并且检查当前的操作是否合法，不合法就输出 <code>IMPOSSIBLE</code> ，否则累加当前状态的操作数，看看是不是当前最优操作。</li>
<li>filp 函数是主体函数，给出模拟状态，判断最优解是否存在，输出结果。
大体就这么个思路，下面给出代码。</li>
</ul>

<h1>代码</h1>

<pre><code class="language-cpp  line-numbers">#include &lt;cstdio&gt;
#include &lt;cstdlib&gt;
#include &lt;cstring&gt;
#include &lt;string&gt;
#include &lt;cmath&gt;
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;sstream&gt;
#include &lt;vector&gt;
#include &lt;functional&gt;
#include &lt;utility&gt;
#include &lt;queue&gt;
#include &lt;deque&gt;
#include &lt;stack&gt;
#include &lt;list&gt;
#include &lt;map&gt;
#include &lt;set&gt;
#include &lt;climits&gt;
typedef long long ll;
using namespace std;
const int maxn = 100;
const int dx[5] = {-1,0,0,0,1};
const int dy[5] = {0,-1,0,1,0};
int org[maxn][maxn], jge[maxn][maxn], ans[maxn][maxn];
//origin / judge / answer
int n, m;

inline int find(int x, int y){
    int res = org[x][y];
    for(int i = 0;i &lt; 5; ++i){
        int nx = x + dx[i],ny = y + dy[i];
        if(nx &gt;= 0 &amp;&amp; nx &lt; m &amp;&amp; ny &gt;= 0 &amp;&amp; ny &lt; n){
            res += jge[nx][ny];
        }
    }
    return (res&amp;1);
}

inline int js(){
    for(int i = 1;i &lt; m; ++i){
        for(int j = 0;j &lt; n; ++j){
            if(find(i-1, j)){
                jge[i][j] = 1;
            }
        }
    }
    for(int i = 0;i &lt; n; ++ i){
        if(find(m-1,i))
            return -1;
    }
    int rs = 0;
    for(int i = 0;i &lt; m; ++i){
        for(int j = 0;j &lt; n; ++j){
            rs += jge[i][j];
        }
    }
    return rs;
}

inline int flip(){
    int res = -1;
    for(int i = 0;i &lt; (1&lt;&lt;n); ++i){
        memset(jge,0,sizeof(jge));
        for(int j = 0;j &lt; n; ++j){
            jge[0][n-j-1] = i&gt;&gt;j&amp;1;
        }
        cout &lt;&lt; endl;
        int num = js();
        if(num &gt;= 0 &amp;&amp; (res &lt; 0 || res &gt; num)){
            res = num;
            memcpy(ans,jge,sizeof(jge));
        }
    }
    if (res &lt; 0){
        cout &lt;&lt; "IMPOSSIBLE" &lt;&lt; endl;
    }
    else {
        for(int i = 0;i &lt; m; ++i){
            cout &lt;&lt; ans[i][0];
            for(int j = 1;j &lt; n; ++j){
                cout &lt;&lt; " " &lt;&lt; ans[i][j];
            }
            cout &lt;&lt; endl;
        }
    }
    return 0;
}


int main(int argc, char const *argv[])
{
    std::ios::sync_with_stdio(false);
    std::cin.tie(0);
    std::cout.tie(0);
    while(cin &gt;&gt; m &gt;&gt; n){
        memset(org,0,sizeof(org));
        for(int i = 0;i &lt; m; ++i){
            for(int j = 0;j &lt; n; ++j){
                cin &gt;&gt; org[i][j];
            }
        }
        flip();
    }
    return 0;
}
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>18</wp:post_id>
		<wp:post_date><![CDATA[2018-09-06 11:27:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-09-06 03:27:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90%e9%a2%98%e8%a7%a3%e3%80%91poj-3279-fliptile]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="poj"><![CDATA[POJ]]></category>
		<category domain="post_tag" nicename="poj"><![CDATA[POJ]]></category>
		<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[题解]]></category>
		<category domain="post_tag" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[题解]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【题解】Recovery-The North American Invitational Programming Contest 2018</title>
		<link>https://fancyking.tk/archives/20</link>
		<pubDate>Thu, 06 Sep 2018 03:32:10 +0000</pubDate>
		<dc:creator><![CDATA[FancyKing]]></dc:creator>
		<guid isPermaLink="false">https://fancyking.tk/?p=20</guid>
		<description></description>
		<content:encoded><![CDATA[[TOCM]

<h2># <em>原题</em></h2>

Consider an n \times mn×m matrix of ones and zeros. For example, this 4 × 4:

<blockquote>
  1111
  0111
  0111
  0110
</blockquote>

We can compute even parity for each row, and each column. In this case, the row parities are [0, 1, 1, 0][0,1,1,0] and the column parities are [1, 0, 0, 1][1,0,0,1] (the parity is 11 if there is an odd number of 11s in the row or column, 00 if the number of 11s is even). Note that the top row is row 11, the bottom row is row nn, the leftmost column is column 11, and the rightmost column is column mm.
Suppose we lost the original matrix, and only have the row and column parities. Can we recover the original matrix? Unfortunately, we cannot uniquely recover the original matrix, but with some constraints, we can uniquely recover a matrix that fits the bill. Firstly, the recovered matrix must contain as many 11’s as possible. Secondly, of all possible recovered matrices with the most 11’s, use the one which has the smallest binary value when you start with row 11, concatenate row 22 to the end of row 11, then append row 33, row 44, and so on.

Input Format
Each input will consist of a single test case.

Note that your program may be run multiple times on different inputs.

Each test case will consist of exactly two lines.

The first line will contain a string R (1 \le |R| \le 50)R(1≤∣R∣≤50), consisting only of the characters 00 and 11. These are the row parities, in order.

The second line will contain a string C (1 \le |C| \le 50)C(1≤∣C∣≤50), consisting only of the characters 00 and 11. These are the column parities, in order.

Output Format
If it is possible to recover the original matrix with the given constraints, then output the matrix as |R|∣R∣ lines of exactly |C|∣C∣ characters, consisting only of 00’s and 11’s. If it is not possible to recover the original matrix, output -1−1.

样例输入1
        0110
        1001
样例输出1
        1111
        0111
        1110
        1111
样例输入2
        0
        1
样例输出2
        -1
样例输入3
        11
        0110
样例输出3
        1011
        1101
题目来源

<blockquote>
  The North American Invitational Programming Contest 2018
</blockquote>

<h2># 简要概括 #</h2>

题目的意思是，一开始有一个矩阵，每一行的 <code>1</code> 的个数如果是偶数个，记为<code>0</code>，奇数个记为<code>1</code>,所以这样会根据矩阵行列中的 <code>1</code> 的个数 来形成两个<code>10</code>字符串。现在已知这个最终的字符串，要我们还原出原先的矩阵，两点额外的要求：
+ 使矩阵中 <code>1</code> 的数目尽可能的多
+ 最后的矩阵的<code>每一行连接起来</code>形成的二进制数最小

<h2># 思路 #</h2>

这样一来我们可以分析得到，我们要在满足尽可能多的 <code>1</code> 的数目的前提下，把 <code>1</code> 往矩阵的右下角扔，这样可以保证，得到的二进制数最小。然后就是另一个问题，我们如何保证当前是尽可能多的 <code>1</code> 。
一开始想把 <code>1</code> 先往右下角放，然后遍历上去，最后检查，但是后来发现这个做法不可取，因为最后一行有可能并不一定都能通过改动变化成合法的，所以后期就把策略改成了 
<em>先把一个矩阵全部假设为1，然后从左上角开始，根据当前的行列中 <code>1</code>  的奇偶数，来判断需要置零的坐标</em>

这个时候要注意 ，对于下面这一种情况的特判，当时找了好久的BUG
00
11
答案应该是
00
11

如果根据我们的算法，x 和 y 的坐标数不对等的话，还要根据二者的差值是否是偶数，来判断能否更改成合法矩阵，二者差值为奇数的情况始终不可能修改成合法的矩阵，应该输出 <code>-1</code>.

<h2># Code Share #</h2>

<pre><code class="language-Cpp  line-numbers">#include &lt;bits/stdc++.h&gt;
typedef long long ll;
using namespace std;
const int maxn = (int)50 + 1;
int dic[maxn][maxn];

int main(int argc, char const *argv[])
{
    std::ios::sync_with_stdio(false);
    std::cin.tie(0);
    std::cout.tie(0);
    string a, b;
    while(cin &gt;&gt; a &gt;&gt; b){
        memset(dic,0,sizeof(dic));
        vector&lt;int&gt; cmda,cmdb;
        bool have = false;
        int lena = a.size(), lenb = b.size();
        for(int i = 0;i &lt; lena; i++){
            if(lenb &amp; 1 &amp;&amp; a[i] == '0'){
                cmda.push_back(i);
            }
            else if(a[i] == '1' &amp;&amp; !(lenb&amp;1)){
                cmda.push_back(i);
            }
        }
        for(int i = 0;i &lt; lenb; i++){
            if(lena &amp; 1 &amp;&amp; b[i] == '0'){
                cmdb.push_back(i);
            }
            else if(b[i] == '1' &amp;&amp; !(lena&amp;1)){
                cmdb.push_back(i);
            }
        }
        if((cmda.size()-cmdb.size()) &amp; 1){
            cout &lt;&lt; -1 &lt;&lt; endl;
            have = true;
        }
        else if(cmda.size() == cmdb.size()){
            int sl = cmda.size();
            for(int i = 0;i &lt; sl; i++){
                dic[cmda[i]][cmdb[i]]++;
            }
        }
        else{
            if(cmda.size() &lt; cmdb.size()){
                int i = 0,j = 0;
                for(i = 0;i &lt; (int)cmdb.size() - (int)cmda.size(); i++){
                    dic[0][cmdb[i]]++;
                }
                for(;j &lt; (int)cmda.size();){
                    dic[cmda[j++]][cmdb[i++]]++;
                }
            }
            else{
                int i = 0,j = 0;
                for(i = 0;i &lt; (int)cmda.size() - (int)cmdb.size(); i++){
                    dic[cmda[i]][0]++;
                }
                for(;j &lt; (int)cmdb.size();){
                    dic[cmda[i++]][cmdb[j++]]++;
                }
            }
        }
        for(int i = 0;i &lt; lena &amp;&amp; !have; i++){
            for(int j = 0;j &lt; lenb; j++){
                cout &lt;&lt; 1 - dic[i][j];
            }
            // cout &lt;&lt; "     " &lt;&lt; i+1;
            cout &lt;&lt; endl;
        }
    }
    return 0;
}

</code></pre>

代码应该很容易懂，也没加上啥巧办法，就是生写的。

<pre><code>                                                            -- 2018.08.12
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>20</wp:post_id>
		<wp:post_date><![CDATA[2018-09-06 11:32:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-09-06 03:32:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90%e9%a2%98%e8%a7%a3%e3%80%91recovery-the-north-american-invitational-programming-contest-2018]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[题解]]></category>
		<category domain="post_tag" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[题解]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>C++ Const</title>
		<link>https://fancyking.tk/archives/23</link>
		<pubDate>Thu, 06 Sep 2018 03:33:55 +0000</pubDate>
		<dc:creator><![CDATA[FancyKing]]></dc:creator>
		<guid isPermaLink="false">https://fancyking.tk/?p=23</guid>
		<description></description>
		<content:encoded><![CDATA[<ul>
<li>写在前面

<ul>
<li>1.const 修饰成员变量</li>
<li>2.const修饰函数参数</li>
<li>3.const修饰成员函数</li>
<li>4.const修饰函数返回值

<ul>
<li>(1)指针传递</li>
<li>(2)值传递</li>
</ul></li>
</ul></li>
<li>读一首诗</li>
</ul>

<!--more-->

<h1>写在前面</h1>

<code>C++ const</code>允许指定一个语义约束，编译器会强制实施这个约束，允许程序员告诉编译器某值是保持不变的。如果在编程中确实有某个值保持不变，就应该大胆明确的使用<code>const</code>，这样可以获得编译器的帮助。
　　

<h2>#  1.const 修饰<code>成员变量</code></h2>

```C++
 #include<iostream>
 using namespace std;
 int main(){
     int a1=3;   ///non-const data
     const int a2=a1;    ///const data

<pre><code> int * a3 = &amp;a1;   ///non-const data,non-const pointer
 const int * a4 = &amp;a1;   ///const data,non-const pointer
 int * const a5 = &amp;a1;   ///non-const data,const pointer
 int const * const a6 = &amp;a1;   ///const data,const pointer
 const int * const a7 = &amp;a1;   ///const data,const pointer

return 0;
</code></pre>

}

<pre><code class=" line-numbers">----------------

## `const`修饰`指针变量`时：

+ 只有一个`const`，如果`const`位于*左侧，表示指针所指数据是常量，不能通过解引用修改该数据；指针本身是变量，可以指向其他的内存单元。
+ (2)只有一个`const`，如果`const`位于*右侧，表示指针本身是常量，不能指向其他内存地址；指针所指的数据可以通过解引用修改。
+ (3)两个`const`，*左右各一个，表示指针和指针所指数据都不能修改。


-------------------------

　　

# 2.const修饰`函数参数`

　　传递过来的参数在函数内不可以改变，与上面修饰变量时的性质一样。
　　
```C++
void testModifyConst(const int _x) {
     _x=5;　　　///编译出错
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;3.const修饰&lt;code&gt;成员函数&lt;/code&gt;&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;(1)&lt;code&gt;const&lt;/code&gt;修饰的成员函数不能修改任何的成员变量(mutable修饰的变量除外)&lt;/li&gt;
&lt;li&gt;(2)&lt;code&gt;const&lt;/code&gt;成员函数不能调用非&lt;code&gt;const&lt;/code&gt;成员函数，因为非&lt;code&gt;const&lt;/code&gt;成员函数可以会修改成员变量&lt;/li&gt;
&lt;/ul&gt;

```C++
  #include <iostream>
  using namespace std;
  class Point{
      public :
      Point(int _x):x(_x){}

<pre><code>  void testConstFunction(int _x) const{

      ///错误，在const成员函数中，不能修改任何类成员变量
     x=_x;

     ///错误，const成员函数不能调用非onst成员函数，因为非const成员函数可以会修改成员变量
     modify_x(_x);
 }

 void modify_x(int _x){
     x=_x;
 }

 int x;
</code></pre>

};

<pre><code class=" line-numbers"><br /><br />#  4.const修饰`函数返回值`

## (1)指针传递

如果返回`const data,non-const pointer`，返回值也必须赋给`const data,non-const pointer`。因为指针指向的数据是常量不能修改。

```C++
 const int * mallocA(){  ///const data,non-const pointer
     int *a=new int(2);
     return a;
 }

 int main()
 {
     const int *a = mallocA();
     ///int *b = mallocA();  ///编译错误
     return 0;
 }
</code></pre>

<h2>(2)值传递</h2>

如果函数返回值采用“<code>·值传递方式·</code>”，由于函数会把返回值复制到外部临时的存储单元中，加<code>const</code> 修饰没有任何价值。所以，对于值传递来说，加<code>const</code>没有太多意义。
所以：
　　<strong>不要把函数<code>int GetInt(void)</code>写成<code>const int GetInt(void)</code>。</strong>
　　<strong>不要把函数<code>A GetA(void)</code>写成<code>const A GetA(void)</code>，其中A 为用户自定义的数据类型。</strong>

　　在编程中要尽可能的使用const，这样可以获得编译器的帮助，以便写出健壮性的代码。

<h1>读一首诗</h1>

<hr />

<blockquote>
<pre><code>    白日不到处,青春恰自来

    苔花如米小,也学牡丹开
</code></pre>
</blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>23</wp:post_id>
		<wp:post_date><![CDATA[2018-09-06 11:33:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-09-06 03:33:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[c-const]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="c%e7%ac%94%e8%ae%b0"><![CDATA[C++笔记]]></category>
		<category domain="category" nicename="%e7%ac%94%e8%ae%b0"><![CDATA[笔记]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>DFS and BFS</title>
		<link>https://fancyking.tk/archives/25</link>
		<pubDate>Thu, 06 Sep 2018 03:35:04 +0000</pubDate>
		<dc:creator><![CDATA[FancyKing]]></dc:creator>
		<guid isPermaLink="false">https://fancyking.tk/?p=25</guid>
		<description></description>
		<content:encoded><![CDATA[<hr />

<ul>
<li>BFS &amp; DFS 学习整理

<ul>
<li>1 . BFS

<ul>
<li>定义</li>
<li>BFS 的使用范围</li>
<li>几点说明</li>
</ul></li>
<li>2 . DFS

<ul>
<li>定义</li>
<li>几点说明</li>
<li>DFS 与 BFS的 节点储存方式</li>
</ul></li>
</ul></li>
</ul>

<!--more-->

<h2><em>1 . BFS</em></h2>

<h3>定义</h3>

BFS (Breadth-First-Search) ——广度优先搜索, 是从根节点开始，遍历完毕整张图，不考虑结果所在的位置， 无论如何都要遍历完毕整张地图才终止。 按照就近原则进行， 距离原点相同的节点的访问顺序是相近的。

<h3>BFS 的使用范围</h3>

<ul>
<li>1、寻找非加权图（或者所有边权重相同）中任两点的最短路径。</p></li>
<li><p>2、寻找其中一个连通分支中的所有节点。（扩散性）</p></li>
<li><p>3、bfs染色法判断是否为二分图。</p></li>
</ul>

<h3>几点说明</h3>

<ul>
<li><p>当在无权地图中寻找最短的路径的时候，不用出现大小比较，因为寻找自起点开始， 只要找到了某一个点，他一定是目前相同步数中距离起点最近的，因为每一步都是从同一个节点开始 ，按照节点出现的顺序（queue记录）去寻找的， 所以先出现的点，一定比后出现的点距离原点近。</p></li>
<li><p>BFS使用　’queue‘　来进行储存未被检测的节点，利用　队列的先进先出的特点来按照宽度访问查找等待计算的节点。</p></li>
<li><p>BFS　实现路径记录，可以每一次保存遍历节点的父节点，这样的话，在输出的时候就可以遍历回溯到上一节点，从而实现路径输出。</p></li>
</ul>

<h2><em>2 . DFS</em></h2>

<h3>定义</h3>

<p>DFS (Depth-First-Search)——深度优先搜索，是从根节点开始， 逐个访问每一条路径， 对于具有多子节点的节点而言，先搜索到某一条子路的最深处，再逐个回溯前驱节点。

DFS 使用栈保存未被检测的节点，节点按照深度优先的次序被访问并依次被压入栈中，并以相反的次序出栈进行新的检测。

<h3>几点说明</h3>

<ul>
<li>DFS使用 栈(stack) 这一种数据结构来储存未访问的节点。</li>
</ul>

<h2>DFS 与 BFS的 节点储存方式</h2>

在DFS中，　使用　队列储存节点，　而在BFS 中，使用 栈储存节点。原因就在于二者 优先次序的不同。

队列是一种先进先出的数据结构，对于每一个节点而言，每一次搜索，都是优先这一个节点的子节点，所以每一次加入等待序列之后，都要等到某一个节点的所有子节点都被访问完毕， 才可以进行下一个节点的访问，这正好是，先进入等待序列 的节点，先出序列进行计算，而后进入的，则后出，所以使用队列储存。
栈是一种先进后出的数据结构，在DFS中，我们要对每一条路径走到底，才可以回溯前驱节点，所以当节点加入等待序列之后，都要先让后加入的（也就是子节点中的某一个） 节点先进行运算， 以保证是一条路走到底，所以符合栈的设计。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>25</wp:post_id>
		<wp:post_date><![CDATA[2018-09-06 11:35:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-09-06 03:35:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[dfs-and-bfs]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="bfs"><![CDATA[BFS]]></category>
		<category domain="post_tag" nicename="bfs"><![CDATA[BFS]]></category>
		<category domain="category" nicename="dfs"><![CDATA[DFS]]></category>
		<category domain="post_tag" nicename="dfs"><![CDATA[DFS]]></category>
		<category domain="post_tag" nicename="%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84"><![CDATA[数据结构]]></category>
		<category domain="category" nicename="%e7%ac%94%e8%ae%b0"><![CDATA[笔记]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Git学习笔记（在更新）</title>
		<link>https://fancyking.tk/archives/27</link>
		<pubDate>Thu, 06 Sep 2018 03:36:30 +0000</pubDate>
		<dc:creator><![CDATA[FancyKing]]></dc:creator>
		<guid isPermaLink="false">https://fancyking.tk/?p=27</guid>
		<description></description>
		<content:encoded><![CDATA[在更，未完成

忽然发现OneNote全选复制是图片，只能导出重新排版了

<h1>本次笔记参考文章：</h1>

git - 简明指南
https://rogerdudler.github.io/git-guide/index.zh.html

廖雪峰Git教程
https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000

<h1>一点建议</h1>

Windows 环境可以的话，建议用PowerShell，Cmd支持有几个命令不是很友好

<h1>一点预备知识</h1>

Git 的工作模式呢，是这样的，算上远程，一共有这么三个地方

<h1>在本地创建新的仓库</h1>

<ul>
<li>首先要在本机上拥有一个文件夹，在文件夹内部进行命令： git init
这样的话，当前所在的路径的文件夹就变成了一个Git管理的仓库，Git会在文件夹内部建立
一个目录，名称为 <code>.git</code> ，默认是 隐藏的，一般也不要动，因为这里面有的是每一个版本的操作信息
可以说是Git 的仓库中枢神经系统了</li>
</ul>

<h1>网站数据丢失，部分数据库难以恢复，正在攻坚克难中</h1>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>27</wp:post_id>
		<wp:post_date><![CDATA[2018-09-06 11:36:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-09-06 03:36:30]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[git%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0%ef%bc%88%e5%9c%a8%e6%9b%b4%e6%96%b0%ef%bc%89]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="git"><![CDATA[Git]]></category>
		<category domain="post_tag" nicename="git"><![CDATA[Git]]></category>
		<category domain="category" nicename="%e7%ac%94%e8%ae%b0"><![CDATA[笔记]]></category>
		<category domain="post_tag" nicename="%e7%ac%94%e8%ae%b0"><![CDATA[笔记]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_291ec35c67cfeebc33ac19f3df077e41]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_db41549c879aa96b62c85de196459dc8]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>PTA 01-复杂度1 最大子列和问题</title>
		<link>https://fancyking.tk/archives/29</link>
		<pubDate>Thu, 06 Sep 2018 03:37:11 +0000</pubDate>
		<dc:creator><![CDATA[FancyKing]]></dc:creator>
		<guid isPermaLink="false">https://fancyking.tk/?p=29</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>
  原命题：中国大学MOOC 2018数据结构 <a href="https://pintia.cn/problem-sets/951072707007700992/problems/968389752868327424">链接</a>
</blockquote>

<ul>
<li>PTA 01-复杂度1 最大子列和问题

<ul>
<li>题面</li>
</ul></li>
<li>思路-1

<ul>
<li>-TLE-代码</li>
</ul></li>
<li>思路-2-在线处理

<ul>
<li>-AC-代码</li>
<li>PTA评判结果</li>
</ul></li>
<li>代码思路</li>
</ul>

<!--more-->

<h2>题面</h2>

<blockquote>
  01-复杂度1 最大子列和问题（20 分）
  给定K个整数组成的序列{ N1 , N2 , ..., NK  }，“连续子列”被定义为{ Ni , Ni+1 , ..., Nj }，其中 1≤i≤j≤K。“最大子列和”则被定义为所有连续子列元素的和中最大者。例如给定序列{ -2, 11, -4, 13, -5, -2 }，其连续子列{ 11, -4, 13 }有最大的和20。现要求你编写程序，计算给定整数序列的最大子列和。
  
  本题旨在测试各种不同的算法在各种数据情况下的表现。各组测试数据特点如下：
  数据1：与样例等价，测试基本正确性；
  数据2：102个随机整数；
  数据3：103个随机整数；
  数据4：104个随机整数；
  数据5：105个随机整数；
  
  输入格式:
  输入第1行给出正整数K (≤100000)；第2行给出K个整数，其间以空格分隔。
  输出格式:
  在一行中输出最大子列和。如果序列中所有整数皆为负数，则输出0。
  
  <blockquote>
    输入样例:
    6
    -2 11 -4 13 -5 -2
    输出样例:
    20
  </blockquote>
  
  作者: DS课程组
  单位: 浙江大学
  时间限制: 50000ms
  内存限制: 64MB
</blockquote>

<h1>思路-1</h1>

首先想到的思路是简单地单纯的暴力枚举，也就是分别枚举起点和终点，这样的话是可以在不计时间的情况下解决问题的，但是提交上去肯定会TLE

<hr />

<h2><em>-TLE-代码</em></h2>

```C++
#include&lt;bits/stdc++.h&gt;

using namespace std;

const int MAX = 200000;
typedef long long LL;

int a[MAX];

int main()
{
    LL num;
    while(cin &gt;&gt; num)
    {
        for(LL i = 0; i &lt; num; i++)
        {
            cin &gt;&gt; a[i];
        }
        LL MAX = 0;
        for(LL i = 0; i &lt; num; i++)
        {
            for(LL j = i; j &lt; num; j++)
            {
                LL Temp_Max = 0;
                for(LL k = i; k &lt;= j; k++)
                {
                    Temp_Max += a[k];
                }
                if(Temp_Max &gt; MAX)
                    MAX = Temp_Max;
            }
        }
        cout&lt;&lt;MAX&lt;&lt;endl;
    }
    return 0;
}

&lt;pre&gt;&lt;code class=&quot; line-numbers&quot;&gt;&lt;br /&gt;--------------------------



# 思路-2-在线处理


然后就想要缩短时间（废话），一开始想着要一个一个的计算，先算出每一个位之前的最大值，然后后面可以利用，后来觉得还是太啰嗦，就没具体写完，看到了陈越姥姥讲的一种思路，就是在线处理，复杂度O（N），可以一边输入一边处理，这样的话，节约时间，也节约了空间，岂不是美哉

----------------------


## *-AC-代码*

```C++
#include &lt;bits/stdc++.h&gt;

using namespace std;
typedef long long LL;

int main()
{
    LL num = 0;
    while(cin &gt;&gt; num)
    {
        int MAX = 0;
        int NOW = 0;
        for(LL i = 0; i &lt; num ; i++)
        {
            int temp = 0;
            cin &gt;&gt; temp;
            NOW += temp;
            if(NOW &gt; MAX)
                MAX = NOW;
            else if(NOW &lt; 0)
            {
                NOW = 0;
            }
        }
        cout &lt;&lt; MAX &lt;&lt;endl;
    }
    return 0;
}
</code></pre>

<hr />

<h2>PTA评判结果</h2>

<blockquote>
  2018/3/17 19:00:35  答案正确    20  01-复杂度1 C++ (clang++)   40 ms<br />
  测试点 提示  结果  耗时  内存
  0   sample 有正负，负数开头结尾，最大和有更新    答案正确    3 ms    224KB
  1   100个随机数 答案正确    2 ms    252KB
  2   1000个随机数    答案正确    3 ms    256KB
  3   10000个随机数   答案正确    6 ms    256KB
  4   100000个随机数  答案正确    40 ms   248KB
</blockquote>

就是比暴力美丽的多（/xk）

<h2><em>代码思路</em></h2>

使用动态处理的方法，现将每n个位数的和算出来，和已经保存下来的最大值相比较，如果大于已知的最大值，则更新，否则，由于规定全是负数的话，结果为0，那么每一步都判断一下<code>Temp_Max</code>的正负就好，并不需要担心最大值会丢失，因为如果有最大值，肯定已经保存下来了。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>29</wp:post_id>
		<wp:post_date><![CDATA[2018-09-06 11:37:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-09-06 03:37:11]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[pta-01-%e5%a4%8d%e6%9d%82%e5%ba%a61-%e6%9c%80%e5%a4%a7%e5%ad%90%e5%88%97%e5%92%8c%e9%97%ae%e9%a2%98]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="pta"><![CDATA[PTA]]></category>
		<category domain="post_tag" nicename="pta"><![CDATA[PTA]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>SDUSTOJ:Problem D: 儿童绘画游戏</title>
		<link>https://fancyking.tk/archives/31</link>
		<pubDate>Thu, 06 Sep 2018 03:38:16 +0000</pubDate>
		<dc:creator><![CDATA[FancyKing]]></dc:creator>
		<guid isPermaLink="false">https://fancyking.tk/?p=31</guid>
		<description></description>
		<content:encoded><![CDATA[<hr />

title: 
date: 2018-08-29 21:46:50

<h2>tags:</h2>

山东科技大学的一道 OJ 题目

<!------more ----------->

<pre><code class=" line-numbers">Problem D: 儿童绘画游戏
Time Limit: 1 Sec  Memory Limit: 128 MB

Description

现在要开发一个儿童绘画游戏。多名儿童可以在同一个软件中，绘制长方形和圆形。请至少定义如下类及其成员：
1.Shape类：图形类，包括一个静态成员函数getCntOfShapes()用于获得总共绘制了多少个图形。
2.Rectangle类：矩形类，是Shape类的子类，包括：
（1）两个double类型的属性，表示矩形的长、宽。
（2）静态成员函数getCntOfRects()用于获取绘制的矩形的个数。
3.Circle类：圆形类，是Shape类的子类，包括：
（1）一个double类型的属性，是圆形的半径。
（2）静态成员函数getCntOfCircles()用于获得圆形的个数。
4.User类：用户类，包括：
（1）一个string类型属性，是用户的名字。
（2）一个Shape的列表，表示该用户绘制的图形的列表。
（3）构造函数User(string s)，参数s是用户名。
（4）静态成员函数getCntOfUsers()用于获取用户个数。
（5）addAShape(int t,double a,double b)：如果t=1，则表示绘制了一个矩形，其长、宽即a和b；如果t=2，则表示绘制了一个圆形，半径为a。
（6）double getArea()方法：返回该用户绘制的所有图形的面积。
5.UserList类：用户列表类，包括：
（1）一个User的列表。
（2）showTotalArea(string s)方法：如果s指定的用户名存在，则输出相应用户的绘制的图形的面积之和；如果s指定的用户不存在，则输出：
The user $ doesn't exist.
其中$为s的值。
（3）重载的输入运算符，用于输入所有的用户及他们绘制的图形。输入格式为：
第1行整数N&gt;0，表示有N个用户，后面的N行，每行对应一个用户。
每个用户的第1个字符串是该用户的名字。之后是一个正整数M，表示该用户绘制了M个图形。之后有M组输入，每组输入第1个整数t表示图形的类型，1和2分别表示矩形和圆形；如果t为1，则之后的2个实数是矩形的长、宽；如果t为2，则之后的1个实数为圆形的半径。
（4）重载的输出运算符，按照如下格式输出所有用户及其绘制的图形：
每个用户占一行，格式为：
$ : rect(a,b),circle(r),…
其中，$为用户名。冒号之后是该用户绘制的图形的列表，输出顺序与输入顺序相同。如果该图形是矩形，则输出”rect(a,b)”，其中a和b是矩形的长、宽；如果该图形是圆形，则输出”circle(r)”，其中r是半径。输出的图形信息两两之间用一个逗号隔开。

Input

输入分为2部分。
第1部分是按照UserList类的要求输入的用户及图形信息。
第2部分有多行，每行包括1个字符串，是一个用户名。
假定所有的用户名均不相同。

Output
见样例。

Sample Input

3
Tom 3 1 1.1 2.2 2 3.3 1 2.1 3.2
Jerry 2 2 3.1 2 4.4
Mary 4 1 1.3 1.4 1 2.5 3.1 2 3.5 2 5.6
CUI
Tom
Jerry
mary
Mary


Sample Output


In beginning, 0 users,0 shapes.
30.26
Now, 4 users,11 shapes, including 6 circles, and 5 rectangles.
Tom : rect(1.1,2.2),circle(3.3),rect(2.1,3.2)
Jerry : circle(3.1),circle(4.4)
Mary : rect(1.3,1.4),rect(2.5,3.1),circle(3.5),circle(5.6)
The user CUI doesn't exist.
43.3346
90.9658
The user mary doesn't exist.
146.505

</code></pre>

Append Code:

<pre><code class="language-cpp  line-numbers">int main()
{
    cout&lt;&lt;"In beginning, "&lt;&lt;User::getCntOfUsers()&lt;&lt;" users,";
    cout&lt;&lt;Shape::getCntOfShapes()&lt;&lt;" shapes."&lt;&lt;endl;
    User tmp("C++");
    tmp.addAShape(1, 1, 2);
    tmp.addAShape(2, 3);
    cout&lt;&lt;tmp.getArea()&lt;&lt;endl;

    UserList lst;
    string s1;
    cin&gt;&gt;lst;
    cout&lt;&lt;"Now, "&lt;&lt;User::getCntOfUsers()&lt;&lt;" users,";
    cout&lt;&lt;Shape::getCntOfShapes()&lt;&lt;" shapes, including ";
    cout&lt;&lt;Circle::getCntOfCircles()&lt;&lt;" circles, and ";
    cout&lt;&lt;Rectangle::getCntOfRects()&lt;&lt;" rectangles."&lt;&lt;endl;
    cout&lt;&lt;lst;
    while(cin&gt;&gt;s1)
    {
        lst.showTotalArea(s1);
    }
    return 0;
}
</code></pre>

AC Code：

<pre><code class="language-cpp  line-numbers">#include &lt;bits/stdc++.h&gt;

using namespace std;
const double pi = 3.14;

class Shape {
public:
    friend class UserList;
    friend class User;
    static int cntOfShapes;
    Shape() {
        cntOfShapes += 1;
    }
    static int getCntOfShapes() {
        return cntOfShapes;
    }
    virtual double Rtrns() = 0;
    virtual void prnt() = 0;
};

class Rectangle :public Shape {
public:
    friend class UserList;
    friend class User;
    static int cntOfRects;
    static int getCntOfRects() {
        return cntOfRects;
    }
    double c, k;
    Rectangle(double a = 0,double b = 0):c(a),k(b) {
        cntOfRects += 1;
    }
    double Rtrns() {
        return (c * k);
    }
    void prnt() {
        cout &lt;&lt; "rect(" &lt;&lt; c &lt;&lt; "," &lt;&lt; k &lt;&lt; ")";
    }
};

class Circle :public Shape {
public:
    friend class User;
    friend class UserList;
    static int cntOfCircles;
    static int getCntOfCircles() {
        return cntOfCircles;
    }
    double r;
    Circle(double x = 0) :r(x) {
        cntOfCircles += 1;
    }
    double Rtrns() {
        return (pi * r * r);
    }
    void prnt() {
        cout &lt;&lt; "circle(" &lt;&lt; r &lt;&lt; ")";
    }
};

class User {
public:
    friend class Shape;
    friend class Rectangle;
    friend class Circle;
    friend class UserList;
    Shape *S;
    vector&lt;Shape*&gt; shapevec;
    string name;
    static int cntOfUsers;
    static int getCntOfUsers() {
        return cntOfUsers;
    }
    User(string t) :name(t) {
        cntOfUsers += 1;
    };
    void addAShape(int t, double a, double b = 0) {
        if(t&amp;1){
            S = new Rectangle(a, b);
            shapevec.push_back(S);
        }
        else {
            S = new Circle(a);
            shapevec.push_back(S);
        }
    }
    double getArea() {
        unsigned int l = shapevec.size();
        double ans = 0;
        for (unsigned int i = 0; i &lt; l; i++) {
            S = shapevec[i];
            ans += S-&gt;Rtrns();
        }
        return ans;
    }
};

class UserList {
public:
    friend class User;
    friend class Circle;
    friend class Rectangle;
    friend class Shape;
    vector&lt;User*&gt; usrvec;
    Shape* S;
    static int cntOfUserLists;
    static int getCntOfUserList() {
        return cntOfUserLists;
    }
    User* U;
    unsigned int GetSize() {
        return usrvec.size();
    }
    void showTotalArea(string s) {
        unsigned int l = usrvec.size();
        int flag = -1;
        // 姓名匹配失败“Tom”
        for (unsigned int i = 0; i &lt; l; i++) {
            U  = usrvec[i];
            string t = U-&gt;name;
            // cout &lt;&lt; t &lt;&lt; "++++++++++" &lt;&lt; s &lt;&lt; endl;// 正在匹配串
            if (s == t) {
                flag = i;
                break;
            }
        }
        if (flag == -1) {
            cout &lt;&lt; "The user " &lt;&lt; s &lt;&lt; " doesn't exist." &lt;&lt; endl;
        }
        else {
            U = usrvec[flag];
            cout &lt;&lt; U-&gt;getArea() &lt;&lt; endl;
        }
    }
    friend istream&amp; operator &gt;&gt; (istream&amp; in, UserList&amp; usr) {
        int N;
        in &gt;&gt; N;
        for (int i = 0; i &lt; N; i++) {// N 个用户
            string name;
            int M;
            in &gt;&gt; name &gt;&gt; M;
            usr.U = new User(name);
            for (int j = 0; j &lt; M; j++) {
                int cmd;
                in &gt;&gt; cmd;
                if (cmd &amp; 1) {
                    double a, b;
                    in &gt;&gt; a &gt;&gt; b;
                    usr.S = new Rectangle(a, b);
                }
                else {
                    double a;
                    in &gt;&gt; a;
                    usr.S = new Circle(a);
                }// 用户输入数据初始化完毕
                usr.U-&gt;shapevec.push_back(usr.S);// 用户自定义图形压入失败-》成功
            }
            usr.usrvec.push_back(usr.U);// 尝试压入用户类型@成功
        }
        return in;
    }

    // Loading-Waitting
    friend ostream&amp; operator &lt;&lt; (ostream&amp; out, UserList usr) {
        // out &lt;&lt; "Loading Writting--- --- --- --- --- --- --- ---" &lt;&lt; endl;
        unsigned int l = usr.GetSize();// 用户表列长度
        // cout &lt;&lt; l &lt;&lt; " IS L " &lt;&lt; endl;
        vector&lt;User*&gt; V = usr.usrvec;// 用户列表
        for (unsigned int i = 0; i &lt; l; i++) {
            User* P = V[i]; // 取出某一个用户
            string name = P-&gt;name;// 获取用户姓名
            cout &lt;&lt; name &lt;&lt; " : ";
            vector&lt;Shape*&gt; T = P-&gt;shapevec;// 取出用户定义图形列表
            unsigned int ll = T.size();
            for (unsigned int k = 0; k &lt; ll; k++) {
                Shape* SP = T[k];// 某一个图形
                //按类型调用函数@BUG:单值输出@修复
                if (k) {
                    cout &lt;&lt; ",";
                    SP-&gt;prnt();
                }
                else{
                    SP-&gt;prnt();
                }
            }
            cout &lt;&lt; endl;
        }
        return out;
    }
};

// 所有静态变量初始化开始
int Shape::cntOfShapes = 0;
int Rectangle::cntOfRects = 0;
int Circle::cntOfCircles = 0;
int User::cntOfUsers = 0;

int main()
{
    cout&lt;&lt;"In beginning, "&lt;&lt;User::getCntOfUsers()&lt;&lt;" users,";
    cout&lt;&lt;Shape::getCntOfShapes()&lt;&lt;" shapes."&lt;&lt;endl;
    User tmp("C++");
    tmp.addAShape(1, 1, 2);
    tmp.addAShape(2, 3);
    cout&lt;&lt;tmp.getArea()&lt;&lt;endl;

    UserList lst;
    string s1;
    cin&gt;&gt;lst;
    cout&lt;&lt;"Now, "&lt;&lt;User::getCntOfUsers()&lt;&lt;" users,";
    cout&lt;&lt;Shape::getCntOfShapes()&lt;&lt;" shapes, including ";
    cout&lt;&lt;Circle::getCntOfCircles()&lt;&lt;" circles, and ";
    cout&lt;&lt;Rectangle::getCntOfRects()&lt;&lt;" rectangles."&lt;&lt;endl;
    cout&lt;&lt;lst;
    while(cin&gt;&gt;s1)
    {
        lst.showTotalArea(s1);
    }
    return 0;
}
</code></pre>

<blockquote>
  一首诗，忆过往，敬未来
  
  白日不到处，青春恰自来；
  苔花如米小，也学牡丹开。
</blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>31</wp:post_id>
		<wp:post_date><![CDATA[2018-09-06 11:38:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-09-06 03:38:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[sdustojproblem-d-%e5%84%bf%e7%ab%a5%e7%bb%98%e7%94%bb%e6%b8%b8%e6%88%8f]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e7%ac%94%e8%ae%b0"><![CDATA[笔记]]></category>
		<category domain="post_tag" nicename="%e7%ac%94%e8%ae%b0"><![CDATA[笔记]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Sublime Text 3 折腾笔记</title>
		<link>https://fancyking.tk/archives/33</link>
		<pubDate>Thu, 06 Sep 2018 03:38:55 +0000</pubDate>
		<dc:creator><![CDATA[FancyKing]]></dc:creator>
		<guid isPermaLink="false">https://fancyking.tk/?p=33</guid>
		<description></description>
		<content:encoded><![CDATA[<ul>
<li>Sublime Text 3 折腾笔记(C/C++)

<ul>
<li>写在前面</li>
<li>获取

<ul>
<li>下载链接</li>
</ul></li>
<li>配置</li>
</ul></li>
<li>插件</li>
<li>总结</li>
</ul>

<!--more-->

<h2>写在前面</h2>

<blockquote>
  <ul>
  <li>不得不说，生在中国，有时候安装一个软件还真是学习的<strong>好“机会”</strong>。</li>
  <li><strong>Good Good Study， Day Day Up！</strong></li>
  </ul>
</blockquote>

<h2>获取</h2>

<pre><code>这个，笔者一开始是在官网下载的，十分顺利，然而下载下来误删之后，官网就打不开了！！！也 `ping` 不通了！笔者实在是不想在国内一堆乱七八糟的网站下载，就飞出去到了官网下载。
不知道什么时候还会再打开或者打不开，相信笔者的童鞋可以下载我安装的版本。百度网盘吧，不是很大
Sublime Text 3 3143 x64&amp;32 PC（上传日期：2018。02.27）
</code></pre>

<h3>下载链接</h3>

<blockquote>
  <a href="https://www.sublimetext.com">官方网站</a>
  <a href="https://pan.baidu.com/s/1o9AsINK">百度云盘： https://pan.baidu.com/s/1o9AsINK</a> 密码: 3e2d
</blockquote>

<h2>配置</h2>

<strong>Sublime不是一个具体的IDE，要使用它要经过一些配置</strong>

<ul>
<li>首先，你要确保能够编译程序，就要有一个编译器，一般的编译器有MinGw和TDM-Gcc

<ul>
<li>有的电脑安装过IDE，比如<code>Dev-c++</code>/<code>Code Blocks</code><strong>（带编译器版本）</strong>/<code>VS</code>··· ···，这个时候，不再需要去下载编译器了,
找到你的软件安装目录，你会发现里面就有MinGw的呢！
如果有的话，你就可以跳过安装编译器这一步了！<a href="#Jump">跳转到下一步</a></li>
<li>对于TDM，有个安装包，一路NEXT就好啦，要记住安装路径哦！</li>
<li>对于MinGw，有一些不一样的地方。安装过程需要联网，而且安装完成后，记得勾选下面截图中的选项,
然后 <code>Installation-&gt;Apply Changes</code></li>
</ul></li>
</ul>

<a href="https://ome6qqcd0.qnssl.com/%E5%8B%BE%E9%80%89.png"><img src="https://ome6qqcd0.qnssl.com/%E5%8B%BE%E9%80%89.png" alt="" /></a>

<span id="Jump"></span>

<ul>
<li>配置Windows系统环境变量

<ul>
<li>此电脑->属性->高级系统设置->环境变量->系统变量中的path ****添加****你的编译器路径下的bin目录。
是<strong>添加</strong>，不要删了或者是重新新建一个Path，不然的话，你的cmd命令就失效了，只有后面再一条一条恢复了。
我恢复的时候，网上的办法完全行不通，注册表自己就改了，最后看了同学的电脑恢复成了系统初始的Path<em>@#@</em>
如果记不住或者拿捏不准的话，可以打开那个MinGw\bin看看，里面是不是有gcc和g++的应用程序，有的话您就放心吧！</li>
</ul></li>
</ul>

<a href="http://ww4.sinaimg.cn/mw690/6958b27dgw1eexlfpt744j20g40e1mz9.jpg"><img src="http://ww4.sinaimg.cn/mw690/6958b27dgw1eexlfpt744j20g40e1mz9.jpg" alt="" /></a>

<ul>
<li>测试

<ul>
<li>测试一下是不是路径是对的，并且文件起作用了。
打开cmd，输入gcc，如果识别了，恭喜你，进入下一步吧！如果失败了，请您先重启一下电脑(部分电脑系统需要重启生效)，
如果依然不正确，请您想一下，是下载的编译器不全呢，还是您路径没有添加正确呢？别放弃，再来一次，会成功的!</li>
</ul></li>
<li>配置Sublime Text

<ul>
<li>不详细介绍Build System了，求知欲强的朋友搜一下吧，或者移步<a href="http://docs.sublimetext.info/en/latest/file_processing/build_systems.html">Link_1</a>\ <a href="http://sublimetext.info/docs/en/reference/build_systems.html">Link_2</a> \ <a href="http://blog.csdn.net/lyctianya/article/details/70234029">CSDN</a>&lt;-感觉很全面的

<ul>
<li>打开Sublime，点击 <code>Tools</code>-><code>Build System</code> -> <code>New Build System</code>  , 
输入下方配置文件，ctrl+s保存，我这里保存的名字是C++
文件位置<code>C:\Users\Fancyking\AppData\Roaming\Sublime Text 3\Packages\User</code>,那个以<code>.sublime-build</code>为后缀的，
用Sublime打开就可以修改</li>
</ul></li>
</ul></li>
</ul>

<strong>C++11配置文件</strong>

<pre><code class=" line-numbers">    {
    "encoding": "utf-8",
    "working_dir": "$file_path",
    "shell_cmd": "g++ -Wall -std=c++11 \"${file}\" -o \"${file_path}/${file_base_name}\"",
    "file_regex": "^(..[^:]*):([0-9]+):?([0-9]+)?:? (.*)$",
    "selector": "source.c++",

    "variants":
    [
        {   
        "name": "Run",
            "shell_cmd": "g++ -Wall -std=c++11 \"${file}\" -o \"${file_base_name}\" &amp;&amp; start cmd /c \"\"${file_path}/${file_base_name}\" &amp; pause\""
        }
    ]
}
</code></pre>

<pre><code>一般这个时候Build System选择刚才新创建的文件的话，直接ctrl+B就可以运行了，不行的话，请重启电脑，
如果还是错误，请检查步骤和文件整体是否完全。（请在英文输入法状态下操作）
</code></pre>

<ul>
<li>Snippets

Sublime还带有一个功能，嗯，你是不是对每次打开新的CPP输入的那一堆头文件感到厌倦了呢，这里帮你解决！
先来看看效果
<a href="https://ome6qqcd0.qnssl.com/input.gif"><img src="https://ome6qqcd0.qnssl.com/input.gif" alt="" /></a>

<ul>
<li>设置：
<code>Tools</code>-<code>New Snippet</code>

文件格式是这样的</p></li>
</ul></li>
</ul>

<pre><code class=" line-numbers">&lt;snippet&gt;
    &lt;content&gt;&lt;![CDATA[
Hello, ${1:this} is a ${2:snippet}.
]]&gt;//在这里输入内容,${1:}表示按完快键键后按光标所在位置
${2:}表示，按完快捷键后，按第一下tab光标转移到的位置。
&lt;/content&gt;
    &lt;!-- Optional: Set a tabTrigger to define how to trigger the snippet --&gt;
    &lt;!-- &lt;tabTrigger&gt;hello&lt;/tabTrigger&gt; --&gt;//快捷键开关，你要把注释取消掉，像
    &lt;tabTrigger&gt;hello&lt;/tabTrigger&gt;//我的图中就是把hello改成了'#init'
    &lt;!-- Optional: Set a scope to limit where the snippet will trigger --&gt;
    &lt;!-- &lt;scope&gt;source.python&lt;/scope&gt; --&gt;
&lt;/snippet&gt;
</code></pre>

<p>我的配置是这样的

<code>c++
&lt;snippet&gt;
    &lt;content&gt;&lt;![CDATA[
#include &lt;cstdio&gt;
#include &lt;cstdlib&gt;
#include &lt;cstring&gt;
#include &lt;string&gt;
#include &lt;cmath&gt;
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;queue&gt;
#include &lt;stack&gt;
#include &lt;map&gt;
#include &lt;set&gt;
typedef long long ll;
using namespace std;
${1:/*Global variables*/}
int main(int argc, char const *argv[])
{
    ${2:/*Code*/}
    return 0;
}
]]&gt;&lt;/content&gt;
    &lt;!-- Optional: Set a tabTrigger to define how to trigger the snippet --&gt;
    &lt;tabTrigger&gt;#init&lt;/tabTrigger&gt;
    &lt;!-- Optional: Set a scope to limit where the snippet will trigger --&gt;
    &lt;!-- &lt;scope&gt;source.python&lt;/scope&gt; --&gt;
&lt;/snippet&gt;</code>

<ul>
<li>使用

<ul>
<li><em>What?</em>   你说你不会用？来来来，按照上面的，你输入<code>#init</code>再按一下Tab，哇，是不是会了！
改变tabTrigger的内容，可以改变快捷键哦！</li>
</ul></li>
<li>Just Enjoy It！

下面，你就可以使（rou）用（lin）他了，快用他去码字吧！</p></li>
</ul>

<h1>插件</h1>

<pre><code>+ 插件有好多啊，大家搜一搜估计就好了，我说我的主题吧。
</code></pre>

<blockquote>
  <p>主题我是<code>Boxy</code>和<code>AFileIcon</code>
  感觉<code>ConvertToUTF8</code>不错
</blockquote>

<ul>
<li><strong>强大的插件管理包</strong>

<ul>
<li><strong>package control</strong>

<ul>
<li>安装</li>
</ul>

按下键盘上的   ctrl+&#96;,  Console（也可以是菜单栏 <code>View</code> -> <code>Show Console</code>
输入下面的内容(来自官方啦，不过根据官方说，会不定时更新)  <a href="https://packagecontrol.io/installation#st3">Link</a> ，回车
     Sublime 3

<pre><code class=" line-numbers">import urllib.request,os,hashlib; h = '6f4c264a24d933ce70df5dedcf1dcaee' + 'ebe013ee18cced0ef93d5f746d80ef60'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)
</code></pre>

Sublime 2

<pre><code class=" line-numbers">import urllib2,os,hashlib; h = '6f4c264a24d933ce70df5dedcf1dcaee' + 'ebe013ee18cced0ef93d5f746d80ef60'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) if not os.path.exists(ipp) else None; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler()) ); by = urllib2.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); open( os.path.join( ipp, pf), 'wb' ).write(by) if dh == h else None; print('Error validating download (got %s instead of %s), please try manual install' % (dh, h) if dh != h else 'Please restart Sublime Text to finish installation')
</code></pre>

输入完成。然后在<code>Preference</code>,如果看到了<code>Package Control</code>就完成了。
英文输入法下按下 <code>ctrl+shift+P</code> 输入 <code>pcic</code> ,就可以安装你找到的插件了，只需要输入名字哦！

<ul>
<li>意外
正常情况下，以上操作之后就可以愉快的享受了，但是，你在CN_Zh不是，还有着奇奇怪怪的错误。
> 如果你选中了 <code>Package Control Install Package</code> ，但是弹出来一个对话框，说：
Package Control：There are no packages available for installation
那是因为有一个文件，他没有在网上预定好的地方下载到，
我的解决方法是，翻出去下载下来（网页右键单击另存为），放到本地，然后改一下设置的文件获取路径。
下载到本地之后，找到文件 <code>PackageControl.sublime-settings</code>
(在文件夹里找或者是<code>Preference</code>-><code>Package Setting</code>-><code>Settings Default</code>)
改掉第一个<code>channels</code>,将里面的网址对应的部分改成 <code>C:\\Users\\Fancyking\\Documents\\Sublime\\channel_v3.json</code>
最终指向channel_v3.json文件就好啦。你就可以看见搜索框了！</li>
<li>高兴太早

<ul>
<li>有的时候，下载还是不成功，是为什么呢，哎，你还在CN_Zh，如果打开Package Control的Debug的话，
你会发现，网站链接有时候会失败，哎，我是找了一个ipv4的地址放在了<code>hosts</code>文件里,
<code>50.116.33.29 sublime.wbond.net
50.116.34.243 packagecontrol.io</code>
谁知道起不起作用，还是一会儿行一会儿不行的!
反正也不是插件狂，找个好的时候下载完了就好啦，也不是很用愁。
对了，要是这玩意一直不能用的话，你可以搜到插件以后，手动安装，麻烦是会有的，还有依赖等着你，/xk。</li>
</ul></li>
<li>不服输
我说，你不让我简简单单的安装，我就会放弃吗，醒醒吧，像咱们这么勤劳奋斗热爱祖国的少年，当让是另外想办法啦！
另一条路就是，下载源码，解压到 <code>Package Control</code> 文件夹下，注意哦，GitHub上的Zip，解压之后，不要忘了删除最后的 <code>-master</code> 哦,不然是会报错的！
只要想搞，总是会搞出来的！</li>
</ul></li>
</ul></li>
</ul>

<h1>总结</h1>

<pre><code>折腾了好久，安装了满意的Sublime，这个我觉得兼具好看，快速，体积小，内存小的优点，就是在中国要折腾一下。
写这篇笔记也写到了深夜，希望可以帮到需要的人吧，反正当时我安装的时候，找了好多资料！
</code></pre>

<blockquote>
  The World Is Not Enough!
  — —This is what I believe forever！
  — —This is my belief
</blockquote>

2018.02.28初稿
2018.02.30第一次修改]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>33</wp:post_id>
		<wp:post_date><![CDATA[2018-09-06 11:38:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-09-06 03:38:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[sublime-text-3-%e6%8a%98%e8%85%be%e7%ac%94%e8%ae%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="sublime"><![CDATA[Sublime]]></category>
		<category domain="post_tag" nicename="sublime"><![CDATA[Sublime]]></category>
		<category domain="category" nicename="%e7%ac%94%e8%ae%b0"><![CDATA[笔记]]></category>
		<category domain="post_tag" nicename="%e7%ac%94%e8%ae%b0"><![CDATA[笔记]]></category>
		<category domain="post_tag" nicename="%e8%bd%af%e4%bb%b6"><![CDATA[软件]]></category>
		<category domain="category" nicename="%e8%bd%af%e4%bb%b6"><![CDATA[软件]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>数据结构 — — 并查集</title>
		<link>https://fancyking.tk/archives/35</link>
		<pubDate>Thu, 06 Sep 2018 03:39:55 +0000</pubDate>
		<dc:creator><![CDATA[FancyKing]]></dc:creator>
		<guid isPermaLink="false">https://fancyking.tk/?p=35</guid>
		<description></description>
		<content:encoded><![CDATA[<ul>
<li>并查集一般用于对动态连通性的判断，主要应用于判断两个不相交元素是否在同一个集合，两个点是否连通，变量名等同性以及间接好友的判断。同时并查集经常作为其他模板的一部分实现某些功能。</li>
<li>并查集常用于的题型为判断某两个元素是否属于同一个集合，判断图是否连通或是否有环，或配合其他算法如最小生成树Kruskal，与DP共同使用等。</li>
</ul>

<!--more-->

<ul>
<li>一般，并查集都会实现两种操作，就是查询函数，和链接函数。</li>
</ul>

<h1>普通并查集</h1>

<ul>
<li>类似于树，按照节点的方式来储存，理解并查集。其中的元素的储存，是由原始父节点为代表的树形结构。</li>
<li>每一个元素， 都是一个集合，其中的数值，指向 上层节点(父节点)，由此方法我们可以推断，
<strong>只要两个节点所储存的最原始的父节点相同， 则两个点所代表的元素位于同一个集合。</strong></li>
</ul>

<h2>路径压缩</h2>

<ul>
<li>为了进一步加快查找的速度，我们直接将新加入的节点，连接到原始节点上，这样就可以直接看出，两元素是否位于相同集合。</li>
</ul>

<h2>三个操作  （数组为例）</h2>

<h3>初始化操作</h3>

<ul>
<li>建立合适的储存方式，一般有结构体和数组两种，差别不大，功能是一样的。

<ul>
<li>基本的初始化，就是建立每一个节点的信息，比如 要储存当前元素的父节点，要储存当前元素在树内的深度，
当前元素所代表的数值意义等等。</li>
<li>有时可以将元素所代表的数值意义和当前元素的父节点合并表示，根据题目不同，还要建立别的，具体再分析。</li>
</ul></li>
</ul>

<hr />

```c++
    const int maxn = 100000;

&lt;pre&gt;&lt;code&gt;int m[maxn] = {0};
int r[maxn] = {0};// 数据比较多，节点链比较长时，合并短的，节约时间。

void init(int End)
{
    for(int i = 0;i &lt; maxn &amp;&amp; i &lt;= End; i++)//初始化每一个节点都是父节点，深度为0
    {
        m[i] = i;
        r[m] = 0;
    }
    return;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot; line-numbers&quot;&gt;&lt;br /&gt;----------------------------

### 查找操作

+ 普通并查集的基本查找代码比较简单，这里直接给出代码。

--------------------
```C++
    int Find(int i)
    {
        if(m[i] == i)
            return i;
        else
            return m[i] = Find(m[i]);//路径压缩
    }
</code></pre>

<h2>+ 补充循环+路径压缩的代码 2018-05-20</h2>

```C++
    int Find(int i)
    {
        int pi = i;
        while(pre[pi] != pi)
            pi = pre[pi]; // 找到根节点
        int si = i,j;
        while(si != pi)
        {
            j = pre[si]; // 记录当前节点的前导节点
            pre[si] = pi;// 当前节点的前导节点设置为根节点
            i = j;// 继续处理当前节点的前导节点的前导节点为根节点
        }
        return pi;
    }

&lt;pre&gt;&lt;code class=&quot; line-numbers&quot;&gt;&lt;br /&gt;----------------


### 合并操作

![](https://segmentfault.com/img/bVq2Ok)


























+ 先给出不考虑深度(单链长度) 的代码

-------------

```C++
    void Union(int a,int b)
    {
        m[Find(b)] = Find(a);
        return;
    }
</code></pre>

<hr />

<ul>
<li>下面是考虑深度(单链长度) 的代码</li>
</ul>

<hr />

<code>C++
    void Union(int i,int j)
    {
        i=Find(i);
        j=Find(j);
        if(i == j)
            return ;
        if(rank[i] &gt; rank[j])
            set[j] = i;
        else
        {
            if(rank[i] == rank[j])
                rank[j]++;
            set[i] = j;
        }
    }</code>

<hr />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>35</wp:post_id>
		<wp:post_date><![CDATA[2018-09-06 11:39:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-09-06 03:39:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84-%e5%b9%b6%e6%9f%a5%e9%9b%86]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e5%b9%b6%e6%9f%a5%e9%9b%86"><![CDATA[并查集]]></category>
		<category domain="post_tag" nicename="%e5%b9%b6%e6%9f%a5%e9%9b%86"><![CDATA[并查集]]></category>
		<category domain="post_tag" nicename="%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84"><![CDATA[数据结构]]></category>
		<category domain="category" nicename="%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84"><![CDATA[数据结构]]></category>
		<category domain="category" nicename="%e7%ac%94%e8%ae%b0"><![CDATA[笔记]]></category>
		<category domain="post_tag" nicename="%e7%ac%94%e8%ae%b0"><![CDATA[笔记]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>给自己的网站添加HTTPS证书支持及优化</title>
		<link>https://fancyking.tk/archives/37</link>
		<pubDate>Thu, 06 Sep 2018 03:41:15 +0000</pubDate>
		<dc:creator><![CDATA[FancyKing]]></dc:creator>
		<guid isPermaLink="false">https://fancyking.tk/?p=37</guid>
		<description></description>
		<content:encoded><![CDATA[后面又用Oneinstack 安装了新的网站，就是当前的这个，后期会写一篇笔记记录操作

<h1>写在前面</h1>

<ul>
<li>这里面我主要是自己独立的服务器添加HTTPS支持，关于对GitHub个人站点添加的以后再写。</li>
<li>我的笔记和操作使用的是免费的域名和免费的HTTPS证书，但是操作对于所有的来说都是一样的。</li>
<li>证书基于 TrustAsia， 别的都差不多的。</li>
<li>VPS 上用的LNMP建站。</li>
</ul>

<!----more----------->

<h1>用到的站点和准备工作</h1>

<ul>
<li>服务器： <a href="https://bwh1.net/" title="搬瓦工">搬瓦工</a></p></li>
<li><p>域名供应商：<a href="https://www.freenom.com" title="Freenom">Freenom</a></p></li>
<li><p>HTTPS证书支持：<a href="https://freessl.org/" title="FreeSSL.org">FreeSSL.org</a></p></li>
<li><p>各个网站的账号和权限，域名解析这里就不写了，可以参考另一篇文章</p></li>
</ul>

<h1>操作步骤</h1>

<ol>
<li><p>首先一定要做的是给自己的网址进行解析好，也就是通过网址能够直接访问到网站

.    然后来到 <code>FreeSSl</code> 这个网站，网站操作很直白，首页填入你自己的域名（一般都是自己拥有的顶级域名，类似于 <code>fancyking.ml</code> 这种，而不是二、三级域名，www可以在以后301重定向过来）。
<code>TrustAsia</code>提供的是双域名支持， <code>Let's Encrypt</code> 提供的是多域名的支持，目前是最好申请V2 的多域名通配符版本。我这里拿的是亚洲诚信。
.    之后，输入邮箱，他会根据你的邮箱去给你证书，证书的生成参数没有特殊需求的话用他的默认参数就行，有的话就按照需求。
.    他会让你去证明网站的归属权，这里我选择的是DNS的验证证书，所以我需要把DNS域名的解析加上一条TXT记录，记录的值他会给你，按照他说的配置好DNS那边就好
（如果是国外的DNS解析，就像FreeNom，生效可能比较慢，这个一种方法就是使用其他的解析服务，比如说DNSPOD+或者CLOUDXNS或者其他的方法来加速解析生效，要不你就等一会儿，反正验证失败之后一天内也可以再次在订单列表中验证，但是注意尽量间隔10分钟以上）
.    验证成功之后你就会发现你可以下载证书文件（私钥自己看着添加吧，我没加）了，在订单列表中，下载证书，应该会得到压缩包：<code>chain.zip</code>
.    第一次下载的包里面会有两个文件，一个 <code>chain.pem</code> 和 <code>private.key</code>，（得到crt 文件的一样，就是类型不同，其中 <code>chain.pem</code> 是我们的证书文件，它是一个包含中间证书的证书链文件。所以，当你的服务器需要三个文件时，你可以将 <code>chain.pem</code> 拆分为两个文件，比如 <code>cert.pem</code>(前部分) 和 <code>ca.pem</code>（后部分）。<code>pem</code> 是兼容 <code>crt</code> 的，也就是 <code>pem</code> 重命名就可以得到有效的 <code>crt</code> 文件）
(<strong>注意的是，key 文件只有第一次下载的时候有！！！丢失了无法寻找，他网站那边也不留下！！！</strong>)
.    上传证书文件到服务器，可以不是当前网站目录，在VPS上就好。
.    按照站点建立方式的不同，使自己的站点证书指向为当前服务器的<strong>绝对地址</strong>！下面按照我的LNMP给出。

.    一种是有了SSL证书再去建站，这个在LNMP上配置很简单，因为是引导式船创建站点，所以他会问你是不是要求支持SSL，这个时候，会有两个选项，一个是自动去Let's Encrypt 得到证书，这种就是傻瓜式的，输入一个邮箱就好；另一种就是自己获取的SSL证书，填入绝对路径就好

<ol>
<li>另一种就是给现有的网站加入SSL，也很简单，使用命令 <code>lnmp ssl add</code> 然后按照步骤操作就好了。安装需要等一会儿。</li>
</ol></li>
</ol>

<h1>强制使用HTTPS访问</h1>

经过上面的配置，我发现通过HTTPS的域名访问确实很正常， 但是一但输入的是没有加HTTPS的域名的话，还是不会验证SSL证书，所以需要手动的强制都走 https 的域名访问，方法301重定向如下：

<ol>
<li>到 <code>/usr/local/nginx/conf/vhost</code> 目录下，找到自己的站点配置文件
比如我的就是 fancyking.ml.conf
.    然后在不是SSL的那个server（一般是第一个），里面，加上一行，位置如图片所示：
第七行的 return 301 https……</li>
</ol>

<img src="https://i.loli.net/2018/08/09/5b6c5b27f04fd.jpg" alt="blob.jpg" />

<h1>关于网站 SSL 验证更加严谨</h1>

<ul>
<li>这里主要是根据 <a href="https://myssl.com" title="<code>MySSL</code>"><code>MySSL</code></a> 的评测进行的。如果仅仅经过上面的配置评测并不是  <code>A+</code>级别的，也不都是可信或者全绿，既然都上SSL了，那就把他弄的好点吧。</li>
</ul>

我的网站的评测信息 ： <a href="https://myssl.com/fancyking.ml?status=q" title="HERF">HERF</a>

先占坑，后期再写，大夏天的宿舍停电了！！！
山东停电专业大学]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>37</wp:post_id>
		<wp:post_date><![CDATA[2018-09-06 11:41:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-09-06 03:41:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%bb%99%e8%87%aa%e5%b7%b1%e7%9a%84%e7%bd%91%e7%ab%99%e6%b7%bb%e5%8a%a0https%e8%af%81%e4%b9%a6%e6%94%af%e6%8c%81%e5%8f%8a%e4%bc%98%e5%8c%96]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ssl"><![CDATA[SSL]]></category>
		<category domain="category" nicename="%e7%bd%91%e7%ab%99"><![CDATA[网站]]></category>
		<category domain="post_tag" nicename="%e7%bd%91%e7%ab%99"><![CDATA[网站]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>数据结构 — — 树状数组</title>
		<link>https://fancyking.tk/archives/39</link>
		<pubDate>Thu, 06 Sep 2018 03:41:59 +0000</pubDate>
		<dc:creator><![CDATA[FancyKing]]></dc:creator>
		<guid isPermaLink="false">https://fancyking.tk/?p=39</guid>
		<description></description>
		<content:encoded><![CDATA[<hr />

title: 
date: 2018-05-20 12:54:17

<h2>tags: [树状数组,数据结构,算法]</h2>

<h1>定义</h1>

树状数组也叫做Fenwick树， 也叫做 Binary Indexed Tree，经常被用来 高效的计算数列的前缀和 和 区间和等 查询和修改的时间复杂度皆为O(log(n)),空间复杂度为O(n);

<!--more-->

<img src="http://odwv9d2u8.bkt.clouddn.com/17-10-22/33371936.jpg" alt="" />

图片源自banananana:<a href="https://www.cnblogs.com/George1994/">herf</a> 
  图片中的a 是原数据数组，c 是树状数组，不难发现

<blockquote>
  C1 = A1 
  C2 = A1+A2 
  C3 = A3 
  C4 = A1+A2+A3+A4 
  C5 = A5 
  C6 = A5+A6 
  C7 = A7 
  C8 = A1+A2+A3+A4+A5+A6+A7+A8
</blockquote>

<h1>原理及几个操作函数</h1>

<h2>lowbit()</h2>

<pre><code class="language-cpp  line-numbers">int lowbit(int x)
    return (x &amp; -x);
</code></pre>

此函数利用的是二进制的性质，来求得某一个数字的从后往前的连续0的位数，也就是取出数字最低位的1.

<pre><code>举例说明：
-x 代表 x 的负数 计算机中负数使用对应的 正数的补码 来表示.
对于数字 6，其二进制为110，-x 就是 010,进行求与运算结果为 0010 = 2^1 = 2；
</code></pre>

按照此方法求得的答案k，用原来的 x 加上k，就得到了此节点的父节点，而如果将原来的 x 减去k，就得到了此节点的上一个父节点。

<h2>单点修改-change()</h2>

<pre><code class="language-cpp  line-numbers">// 将a数组里的第x个元素更改d,数组向后更新
void change(LL&amp; a,int x,int d){
    if(x &lt; 1)
        return ;
    while(x &lt; maxn){
        a[x] += d;
        x += lowbit(x);
    }
}
</code></pre>

<h2>求和函数-addsum()</h2>

<pre><code class="language-cpp  line-numbers">// 数组向前求和
LL addsum(LL&amp; a,int l){
    LL ans = 0;
    while(l &gt; 0){
        ans += a[l];
        l -= lowbit(l);
    }
    return ans;
}
</code></pre>

<h1>区间更新 + 区间查询</h1>

观察下列式子：

<blockquote>
  a[1] + a[2] + ... + a[n]  = (c[1]) + (c[1]+c[2]) + ... + (c[1]+c[2]+...+c[n])
  
  = n * c[1] + (n-1) * c[2] + ... + c[n]
  
  = n * (c[1] + c[2] + ... + c[n]) - (0 * c[1] + 1 * c[2] + ... + (n-1) * c[n])    (①)
  
  那么我们就维护一个数组c2[n]，其中c2[i] = (i - 1) * c[i]
  每当修改c的时候，就同步修改一下c2，这样复杂度就不会改变
  那么可得      ① = n * addsum(c,n) - addsum(c2,n);
</blockquote>

<h2>例子</h2>

<a href="https://vjudge.net/problem/POJ-3468">POJ</a>        //  Code 用 树状数组 给出
<a href="http://www.codevs.cn/problem/1082/">CodeVS</a>

先给出代码：

<pre><code class="language-cpp  line-numbers">#include &lt;bits/stdc++.h&gt;

using namespace std;
typedef long long LL;

const int maxn = 1e5 + 10;

LL a[maxn + 10] = {0};
LL m[maxn + 10] = {0};
LL m1[maxn + 10] = {0};

LL lowbit(LL x)
{
    return (x &amp; -x);
}

LL change(LL* s, LL n, LL d)
{
    if (n &lt; 1)
        return 0;
    while (n &lt; maxn)
    {
        s[n] += d;
        n += lowbit(n);
    }
    return 1;
}

LL addsum(LL* s, LL x)
{
    LL ans = 0;
    while (x &gt; 0)
    {
        ans += s[x];
        x -= lowbit(x);
    }
    return ans;
}

int main()
{
    std::ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    LL N, Q;
    while (cin &gt;&gt; N &gt;&gt; Q)
    {
        memset(m, 0, sizeof(m));
        for (LL i = 1; i &lt;= N; i++)
        {
            cin &gt;&gt; a[i];
            change(m, i, a[i] - a[i - 1]);
            change(m1, i, (i - 1) * (a[i] - a[i - 1]));
        }
        char C;
        LL a, b, c;
        while (Q--)
        {
            cin &gt;&gt; C;
            if (C == 'Q')
            {
                cin &gt;&gt; a &gt;&gt; b;
                LL sumo = (a - 1) * addsum(m, a - 1) - addsum(m1, a - 1);
                LL sumt = b * addsum(m, b) - addsum(m1, b);
                cout &lt;&lt; sumt - sumo &lt;&lt; endl;
            }
            else
            {
                cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;
                change(m, a , c);
                change(m, b + 1, -c);
                change(m1, a, (a - 1) * c);
                change(m1, b + 1, -c * (b));
            }
        }
    }
    return 0;
}

</code></pre>

<ul>
<li>当用户输入数据的时候，每一次更新，先将树状数组 m 从 a 之后更新为加上 c，然后为了保证区间更新，再将树状数组 m 的b + 1之后再减去 c，如此，就保证了区间更新。</li>
<li>区间更新的同时，要更新树状数组 m1， 从a 位开始都加上 <code>(a-1)  *  c</code>,  从 b + 1位开始，都减去 <code>c * b</code>, 就保证了第二个数组是在 <code>logn</code> 的基础上更新的，保证了时间。</li>
<li>区间的查询，我们只需要取出m 数组的<code>a - 1</code>位乘上<code>( a - 1 )</code>再减去m1 的<code>a - 1</code> 的<code>a - 1</code>的查询，得到前a 项的前n 项和， 再减去类似方法求出的前 b 项的前 n 项和即可得到所求区间的和！</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>39</wp:post_id>
		<wp:post_date><![CDATA[2018-09-06 11:41:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-09-06 03:41:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84-%e6%a0%91%e7%8a%b6%e6%95%b0%e7%bb%84]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84"><![CDATA[数据结构]]></category>
		<category domain="category" nicename="%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84"><![CDATA[数据结构]]></category>
		<category domain="post_tag" nicename="%e6%a0%91%e7%8a%b6%e6%95%b0%e7%bb%84"><![CDATA[树状数组]]></category>
		<category domain="category" nicename="%e7%ac%94%e8%ae%b0"><![CDATA[笔记]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
